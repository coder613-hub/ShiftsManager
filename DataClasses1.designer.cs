#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ShiftsManager
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ShiftsManagerDB")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUSER_TYPE(USER_TYPE instance);
    partial void UpdateUSER_TYPE(USER_TYPE instance);
    partial void DeleteUSER_TYPE(USER_TYPE instance);
    partial void InsertUSER(USER instance);
    partial void UpdateUSER(USER instance);
    partial void DeleteUSER(USER instance);
    partial void InsertCLOCK_IN_OUT(CLOCK_IN_OUT instance);
    partial void UpdateCLOCK_IN_OUT(CLOCK_IN_OUT instance);
    partial void DeleteCLOCK_IN_OUT(CLOCK_IN_OUT instance);
    partial void InsertPAYMENT(PAYMENT instance);
    partial void UpdatePAYMENT(PAYMENT instance);
    partial void DeletePAYMENT(PAYMENT instance);
    partial void InsertRATE(RATE instance);
    partial void UpdateRATE(RATE instance);
    partial void DeleteRATE(RATE instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::ShiftsManager.Properties.Settings.Default.ShiftsManagerDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<USER_TYPE> USER_TYPEs
		{
			get
			{
				return this.GetTable<USER_TYPE>();
			}
		}
		
		public System.Data.Linq.Table<USER> USERs
		{
			get
			{
				return this.GetTable<USER>();
			}
		}
		
		public System.Data.Linq.Table<CLOCK_IN_OUT> CLOCK_IN_OUTs
		{
			get
			{
				return this.GetTable<CLOCK_IN_OUT>();
			}
		}
		
		public System.Data.Linq.Table<PAYMENT> PAYMENTs
		{
			get
			{
				return this.GetTable<PAYMENT>();
			}
		}
		
		public System.Data.Linq.Table<RATE> RATEs
		{
			get
			{
				return this.GetTable<RATE>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.USER_TYPE")]
	public partial class USER_TYPE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _user_type_id;
		
		private string _user_type_desc;
		
		private EntitySet<USER> _USERs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onuser_type_idChanging(int value);
    partial void Onuser_type_idChanged();
    partial void Onuser_type_descChanging(string value);
    partial void Onuser_type_descChanged();
    #endregion
		
		public USER_TYPE()
		{
			this._USERs = new EntitySet<USER>(new Action<USER>(this.attach_USERs), new Action<USER>(this.detach_USERs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_type_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int user_type_id
		{
			get
			{
				return this._user_type_id;
			}
			set
			{
				if ((this._user_type_id != value))
				{
					this.Onuser_type_idChanging(value);
					this.SendPropertyChanging();
					this._user_type_id = value;
					this.SendPropertyChanged("user_type_id");
					this.Onuser_type_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_type_desc", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string user_type_desc
		{
			get
			{
				return this._user_type_desc;
			}
			set
			{
				if ((this._user_type_desc != value))
				{
					this.Onuser_type_descChanging(value);
					this.SendPropertyChanging();
					this._user_type_desc = value;
					this.SendPropertyChanged("user_type_desc");
					this.Onuser_type_descChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_TYPE_USER", Storage="_USERs", ThisKey="user_type_id", OtherKey="user_type_id")]
		public EntitySet<USER> USERs
		{
			get
			{
				return this._USERs;
			}
			set
			{
				this._USERs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_USERs(USER entity)
		{
			this.SendPropertyChanging();
			entity.USER_TYPE = this;
		}
		
		private void detach_USERs(USER entity)
		{
			this.SendPropertyChanging();
			entity.USER_TYPE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.USERS")]
	public partial class USER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _user_id;
		
		private System.Nullable<int> _user_type_id;
		
		private string _username;
		
		private string _password;
		
		private EntitySet<CLOCK_IN_OUT> _CLOCK_IN_OUTs;
		
		private EntitySet<PAYMENT> _PAYMENTs;
		
		private EntitySet<RATE> _RATEs;
		
		private EntityRef<USER_TYPE> _USER_TYPE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void Onuser_type_idChanging(System.Nullable<int> value);
    partial void Onuser_type_idChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    #endregion
		
		public USER()
		{
			this._CLOCK_IN_OUTs = new EntitySet<CLOCK_IN_OUT>(new Action<CLOCK_IN_OUT>(this.attach_CLOCK_IN_OUTs), new Action<CLOCK_IN_OUT>(this.detach_CLOCK_IN_OUTs));
			this._PAYMENTs = new EntitySet<PAYMENT>(new Action<PAYMENT>(this.attach_PAYMENTs), new Action<PAYMENT>(this.detach_PAYMENTs));
			this._RATEs = new EntitySet<RATE>(new Action<RATE>(this.attach_RATEs), new Action<RATE>(this.detach_RATEs));
			this._USER_TYPE = default(EntityRef<USER_TYPE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_type_id", DbType="Int")]
		public System.Nullable<int> user_type_id
		{
			get
			{
				return this._user_type_id;
			}
			set
			{
				if ((this._user_type_id != value))
				{
					if (this._USER_TYPE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_type_idChanging(value);
					this.SendPropertyChanging();
					this._user_type_id = value;
					this.SendPropertyChanged("user_type_id");
					this.Onuser_type_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(45) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(45) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_CLOCK_IN_OUT", Storage="_CLOCK_IN_OUTs", ThisKey="user_id", OtherKey="user_id")]
		public EntitySet<CLOCK_IN_OUT> CLOCK_IN_OUTs
		{
			get
			{
				return this._CLOCK_IN_OUTs;
			}
			set
			{
				this._CLOCK_IN_OUTs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_PAYMENT", Storage="_PAYMENTs", ThisKey="user_id", OtherKey="user_id")]
		public EntitySet<PAYMENT> PAYMENTs
		{
			get
			{
				return this._PAYMENTs;
			}
			set
			{
				this._PAYMENTs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_RATE", Storage="_RATEs", ThisKey="user_id", OtherKey="user_id")]
		public EntitySet<RATE> RATEs
		{
			get
			{
				return this._RATEs;
			}
			set
			{
				this._RATEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_TYPE_USER", Storage="_USER_TYPE", ThisKey="user_type_id", OtherKey="user_type_id", IsForeignKey=true)]
		public USER_TYPE USER_TYPE
		{
			get
			{
				return this._USER_TYPE.Entity;
			}
			set
			{
				USER_TYPE previousValue = this._USER_TYPE.Entity;
				if (((previousValue != value) 
							|| (this._USER_TYPE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USER_TYPE.Entity = null;
						previousValue.USERs.Remove(this);
					}
					this._USER_TYPE.Entity = value;
					if ((value != null))
					{
						value.USERs.Add(this);
						this._user_type_id = value.user_type_id;
					}
					else
					{
						this._user_type_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("USER_TYPE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CLOCK_IN_OUTs(CLOCK_IN_OUT entity)
		{
			this.SendPropertyChanging();
			entity.USER = this;
		}
		
		private void detach_CLOCK_IN_OUTs(CLOCK_IN_OUT entity)
		{
			this.SendPropertyChanging();
			entity.USER = null;
		}
		
		private void attach_PAYMENTs(PAYMENT entity)
		{
			this.SendPropertyChanging();
			entity.USER = this;
		}
		
		private void detach_PAYMENTs(PAYMENT entity)
		{
			this.SendPropertyChanging();
			entity.USER = null;
		}
		
		private void attach_RATEs(RATE entity)
		{
			this.SendPropertyChanging();
			entity.USER = this;
		}
		
		private void detach_RATEs(RATE entity)
		{
			this.SendPropertyChanging();
			entity.USER = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CLOCK_IN_OUT")]
	public partial class CLOCK_IN_OUT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _clock_id;
		
		private System.Nullable<int> _user_id;
		
		private System.DateTime _day_time_in;
		
		private System.Nullable<System.DateTime> _day_time_out;
		
		private EntityRef<USER> _USER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onclock_idChanging(int value);
    partial void Onclock_idChanged();
    partial void Onuser_idChanging(System.Nullable<int> value);
    partial void Onuser_idChanged();
    partial void Onday_time_inChanging(System.DateTime value);
    partial void Onday_time_inChanged();
    partial void Onday_time_outChanging(System.Nullable<System.DateTime> value);
    partial void Onday_time_outChanged();
    #endregion
		
		public CLOCK_IN_OUT()
		{
			this._USER = default(EntityRef<USER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_clock_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int clock_id
		{
			get
			{
				return this._clock_id;
			}
			set
			{
				if ((this._clock_id != value))
				{
					this.Onclock_idChanging(value);
					this.SendPropertyChanging();
					this._clock_id = value;
					this.SendPropertyChanged("clock_id");
					this.Onclock_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int")]
		public System.Nullable<int> user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._USER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_day_time_in", DbType="DateTime NOT NULL")]
		public System.DateTime day_time_in
		{
			get
			{
				return this._day_time_in;
			}
			set
			{
				if ((this._day_time_in != value))
				{
					this.Onday_time_inChanging(value);
					this.SendPropertyChanging();
					this._day_time_in = value;
					this.SendPropertyChanged("day_time_in");
					this.Onday_time_inChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_day_time_out", DbType="DateTime")]
		public System.Nullable<System.DateTime> day_time_out
		{
			get
			{
				return this._day_time_out;
			}
			set
			{
				if ((this._day_time_out != value))
				{
					this.Onday_time_outChanging(value);
					this.SendPropertyChanging();
					this._day_time_out = value;
					this.SendPropertyChanged("day_time_out");
					this.Onday_time_outChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_CLOCK_IN_OUT", Storage="_USER", ThisKey="user_id", OtherKey="user_id", IsForeignKey=true)]
		public USER USER
		{
			get
			{
				return this._USER.Entity;
			}
			set
			{
				USER previousValue = this._USER.Entity;
				if (((previousValue != value) 
							|| (this._USER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USER.Entity = null;
						previousValue.CLOCK_IN_OUTs.Remove(this);
					}
					this._USER.Entity = value;
					if ((value != null))
					{
						value.CLOCK_IN_OUTs.Add(this);
						this._user_id = value.user_id;
					}
					else
					{
						this._user_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("USER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PAYMENTS")]
	public partial class PAYMENT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _payment_id;
		
		private System.Nullable<int> _user_id;
		
		private decimal _payment_amount;
		
		private System.DateTime _payment_date;
		
		private EntityRef<USER> _USER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onpayment_idChanging(int value);
    partial void Onpayment_idChanged();
    partial void Onuser_idChanging(System.Nullable<int> value);
    partial void Onuser_idChanged();
    partial void Onpayment_amountChanging(decimal value);
    partial void Onpayment_amountChanged();
    partial void Onpayment_dateChanging(System.DateTime value);
    partial void Onpayment_dateChanged();
    #endregion
		
		public PAYMENT()
		{
			this._USER = default(EntityRef<USER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_payment_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int payment_id
		{
			get
			{
				return this._payment_id;
			}
			set
			{
				if ((this._payment_id != value))
				{
					this.Onpayment_idChanging(value);
					this.SendPropertyChanging();
					this._payment_id = value;
					this.SendPropertyChanged("payment_id");
					this.Onpayment_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int")]
		public System.Nullable<int> user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._USER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_payment_amount", DbType="Decimal(18,0) NOT NULL")]
		public decimal payment_amount
		{
			get
			{
				return this._payment_amount;
			}
			set
			{
				if ((this._payment_amount != value))
				{
					this.Onpayment_amountChanging(value);
					this.SendPropertyChanging();
					this._payment_amount = value;
					this.SendPropertyChanged("payment_amount");
					this.Onpayment_amountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_payment_date", DbType="Date NOT NULL")]
		public System.DateTime payment_date
		{
			get
			{
				return this._payment_date;
			}
			set
			{
				if ((this._payment_date != value))
				{
					this.Onpayment_dateChanging(value);
					this.SendPropertyChanging();
					this._payment_date = value;
					this.SendPropertyChanged("payment_date");
					this.Onpayment_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_PAYMENT", Storage="_USER", ThisKey="user_id", OtherKey="user_id", IsForeignKey=true)]
		public USER USER
		{
			get
			{
				return this._USER.Entity;
			}
			set
			{
				USER previousValue = this._USER.Entity;
				if (((previousValue != value) 
							|| (this._USER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USER.Entity = null;
						previousValue.PAYMENTs.Remove(this);
					}
					this._USER.Entity = value;
					if ((value != null))
					{
						value.PAYMENTs.Add(this);
						this._user_id = value.user_id;
					}
					else
					{
						this._user_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("USER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RATE")]
	public partial class RATE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _rate_id;
		
		private System.Nullable<int> _user_id;
		
		private decimal _rate_amt;
		
		private EntityRef<USER> _USER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onrate_idChanging(int value);
    partial void Onrate_idChanged();
    partial void Onuser_idChanging(System.Nullable<int> value);
    partial void Onuser_idChanged();
    partial void Onrate_amtChanging(decimal value);
    partial void Onrate_amtChanged();
    #endregion
		
		public RATE()
		{
			this._USER = default(EntityRef<USER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rate_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int rate_id
		{
			get
			{
				return this._rate_id;
			}
			set
			{
				if ((this._rate_id != value))
				{
					this.Onrate_idChanging(value);
					this.SendPropertyChanging();
					this._rate_id = value;
					this.SendPropertyChanged("rate_id");
					this.Onrate_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int")]
		public System.Nullable<int> user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._USER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rate_amt", DbType="Decimal(18,0) NOT NULL")]
		public decimal rate_amt
		{
			get
			{
				return this._rate_amt;
			}
			set
			{
				if ((this._rate_amt != value))
				{
					this.Onrate_amtChanging(value);
					this.SendPropertyChanging();
					this._rate_amt = value;
					this.SendPropertyChanged("rate_amt");
					this.Onrate_amtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_RATE", Storage="_USER", ThisKey="user_id", OtherKey="user_id", IsForeignKey=true)]
		public USER USER
		{
			get
			{
				return this._USER.Entity;
			}
			set
			{
				USER previousValue = this._USER.Entity;
				if (((previousValue != value) 
							|| (this._USER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USER.Entity = null;
						previousValue.RATEs.Remove(this);
					}
					this._USER.Entity = value;
					if ((value != null))
					{
						value.RATEs.Add(this);
						this._user_id = value.user_id;
					}
					else
					{
						this._user_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("USER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
